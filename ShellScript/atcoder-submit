#! /usr/bin/env python3

import configparser
import os
import re
import sys
from collections import namedtuple
from getpass import getpass
from os.path import expanduser, join, splitext
from time import sleep

import requests
from bs4 import BeautifulSoup


Language = namedtuple('Language', ['name', 'id'])
SUFFIXES = {
    '.cpp': [
        Language('C++14 (GCC 5.4.1)', 3003),
        Language('C++14 (Clang 3.8.0)', 3005),
        Language('C++ (GCC 5.4.1)', 3029),
        Language('C++ (Clang 3.8.0)', 3030),
     ],
    '.sh': [Language('Bash (GNU bash v4.3.11)', 3001)],
    '.c': [
        Language('C (GCC 5.4.1)', 3002),
        Language('C (Clang 3.8.0)', 3004),
    ],
    '.cs': [Language('C# (Mono 4.6.2.0)', 3006)],
    '.clj': [Language('Clojure (1.8.0)', 3007)],
    '.lisp': [Language('Common Lisp (SBCL 1.1.14)', 3008)],
    '.d': [
        Language('D (DMD64 v2.070.1)', 3009),
        Language('D (LDC 0.17.0)', 3010),
        Language('D (GDC 4.9.4)', 3011),
    ],
    '.f08': [Language('Fortran (gfortran v4.8.4)', 3012)],
    '.go': [Language('Go (1.6)', 3013)],
    '.hs': [Language('Haskell (GHC 7.10.3)', 3014)],
    '.java': [
        Language('Java7 (OpenJDK 1.7.0)', 3015),
        Language('Java8 (OpenJDK 1.8.0)', 3016),
    ],
    '.js': [Language('JavaScript (node.js v5.12)', 3017)],
    '.ml': [Language('OCaml (4.02.3)', 3018)],
    '.pas': [Language('Pascal (FPC 2.6.2)', 3019)],
    '.pl': [Language('Perl (v5.18.2)', 3020)],
    '.php': [
        Language('PHP (5.6.30)', 3021),
        Language('PHP7 (7.0.15)', 3524),
    ],
    '.py': [
        Language('Python2 (2.7.6)', 3022),
        Language('Python3 (3.4.3)', 3023),
        Language('PyPy2 (5.6.0)', 3509),
        Language('PyPy3 (2.4.0)', 3510),
    ],
    '.rb': [Language('Ruby (2.3.3)', 3024)],
    '.scala': [Language('Scala (2.11.7)', 3025)],
    '.scm': [Language('Scheme (Gauche 0.9.3.3)', 3026)],
    '.txt': [Language('Text (cat)', 3027)],
    '.vb': [Language('Visual Basic (Mono 4.0.1)', 3028)],
    '.m': [
        Language('Objective-C (GCC 5.3.0)', 3501),
        Language('Objective-C (Clang 3.8.0)', 3502),
        Language('Octave (4.0.2)', 3519),
    ],
    '.swift': [Language('Swift (swift-2.2-RELEASE)', 3503)],
    '.rs': [Language('Rust (1.15.1)', 3504)],
    '.sed': [Language('Sed (GNU sed 4.2.2)', 3505)],
    '.awk': [Language('Awk (mawk 1.3.3)', 3506)],
    '.bf': [Language('Brainfuck (bf 20041219)', 3507)],
    '.sml': [Language('Standard ML (MLton 20100608)', 3508)],
    '.cr': [Language('Crystal (0.20.5)', 3511)],
    '.fs': [Language('F# (Mono 4.0)', 3512)],
    '.unl': [Language('Unlambda (0.1.3)', 3513)],
    '.lua': [
        Language('Lua (5.3.2)', 3514),
        Language('LuaJIT (2.0.4)', 3515),
    ],
    '.moon': [Language('MoonScript (0.5.0)', 3516)],
    '.ceylon': [Language('Ceylon (1.2.1)', 3517)],
    '.jl': [Language('Julia (0.5.0)', 3518)],
    '.nim': [Language('Nim (0.13.0)', 3520)],
    '.ts': [Language('TypeScript (2.1.6)', 3521)],
    '.p6': [Language('Perl6 (rakudo-star 2016.01)', 3522)],
    '.kt': [Language('Kotlin (1.0.0)', 3523)],
    '.cob': [
        Language('COBOL - Fixed (OpenCOBOL 1.1.0)', 3525),
        Language('COBOL - Free (OpenCOBOL 1.1.0)', 3526),
    ],
}
ALERT_OK = '/usr/share/sounds/freedesktop/stereo/complete.oga'
ALERT_BAD = '/usr/share/sounds/gnome/default/alerts/bark.ogg'

class Agent(object):
    CREDENTIALS = join(expanduser('~'), '.acsubmit-credentials')

    def __init__(self):
        self.s = requests.Session()
        self._login()

    # def __del__(self):
    #     # XXX
    #     self.s.get('https://beta.atcoder.jp/logout')

    def _login(self):
        config = configparser.ConfigParser()
        config.read(self.CREDENTIALS)

        sys.stdout = sys.stderr
        try:
            username = config['user']['name']
        except KeyError:
            username = input('Username: ')

        try:
            password = config['user']['password']
        except KeyError:
            password = getpass()

        sys.stdout = sys.__stdout__

        r = self.s.get('https://beta.atcoder.jp/login')
        soup = BeautifulSoup(r.text, 'lxml')
        csrf_token = soup.find(attrs={'name': 'csrf_token'}).get('value')

        self.s.post('https://beta.atcoder.jp/login', data={
            'username': username,
            'password': password,
            'csrf_token': csrf_token,
        })

    def submit(self, inname, trace=False):
        lang = self._guess_lang(inname)
        pid = self._guess_pid(inname)
        cid = self._guess_cid(pid)

        with open(inname) as fin:
            source = self._prettify_source(fin.read())

        target_url = 'https://beta.atcoder.jp/contests/{}/submit'.format(cid)
        target_page = self.s.get(target_url)
        soup = BeautifulSoup(target_page.text, 'lxml')
        csrf_token = soup.find(attrs={'name': 'csrf_token'}).get('value')

        print('task:\t\t{}'.format(pid), file=sys.stderr)
        print('language:\t{}'.format(lang.name), file=sys.stderr)
        print('source:\t\t{}'.format(inname), file=sys.stderr)

        if os.isatty(0) and os.isatty(2):
            print('sure to submit? [Y/n]:', end=' ', file=sys.stderr)
            q = input()[:1].lower()
            if q == 'n': return 1;

        self.s.post(target_url, data={
            'data.TaskScreenName': pid,
            'data.LanguageId': lang.id,
            'sourceCode': source,
            'csrf_token': csrf_token,
        })

        if trace:
            pid = os.fork()
            if pid == 0:
                self.trace(cid)

    def trace(self, cid):
        mysub_page = self.s.get(
            'https://beta.atcoder.jp/contests/{}/submissions/me'.format(cid)
        )
        soup = BeautifulSoup(mysub_page.text, 'lxml')
        a = soup.find(attrs={
            'href': re.compile('/contests/[^/]+/submissions/\d+'),
        })
        sid = a['href'].split('/')[-1]

        status = 'WJ'
        while True:
            result_page = self.s.get('https://beta.atcoder.jp'+a['href'])
            soup = BeautifulSoup(result_page.text, 'lxml')
            span = soup.find(attrs={'class': 'label'})
            status = span.text.strip()
            # print(status, file=sys.stderr)
            if ' ' in status: break
            if status != 'WJ' and '/' not in status: break
            sleep(5)

        os.system('notify-send Terminal "{} (#{})"'.format(status, sid))
        alert = (ALERT_OK if status == 'AC' else ALERT_BAD)
        os.system('paplay '+alert)

    @classmethod
    def _guess_lang(cls, inname):
        suffix = splitext(inname)[1]
        if suffix in ('.cc', '.C', '.cxx'):
            suffix = '.cpp'

        langs = SUFFIXES[suffix]
        i = 1
        if len(langs) > 1:
            sys.stdout = sys.stderr
            for i, lang in enumerate(langs, 1):
                print('{}) {}'.format(i, lang.name))

            i = 0
            while not 1 <= i <= len(langs):
                try:
                    i = int(input('#? '))
                except ValueError:
                    pass

            sys.stdout = sys.__stdout__

        lang = langs[i-1]
        return lang  # may raise KeyError

    @classmethod
    def _guess_pid(cls, inname):
        prefix = splitext(inname)[0]
        # XXX e.g. abc001_a must be changed to abc001_1
        return prefix

    @classmethod
    def _guess_cid(cls, cid):
        m = re.fullmatch(r'(a[bgpr]c\d{3})_[A-Za-z\d]', cid)
        if m is not None:
            return m.group(1)

        m = re.fullmatch(r'(.+)_[A-Za-z\d]', cid)
        if m is None:
            raise KeyError  # ValueError ???

        # XXX not always this works
        # ??? try access -> ask to user ???
        return m.group(1).replace('_', '-')

    @classmethod
    def _prettify_source(cls, source):
        source = re.sub(r' +$', '', source)  # trailing whitespaces
        source = source.strip('\n')  # surrounding newlines
        return source


def main():
    # latest source file
    # FIXME sys.argv[1] should override this
    mtime = lambda f: os.stat(join('.', f)).st_mtime
    sorted_ls = [*sorted(os.listdir('.'), key=mtime, reverse=True)]
    sorted_ls = [f for f in sorted_ls if splitext(f)[1] in SUFFIXES]

    if not sorted_ls:
        print('valid source not found', file=sys.stderr)
        return 1

    inname = sorted_ls[0]
    ag = Agent()
    ag.submit(inname, trace=True)

if __name__ == '__main__':
    exit(main())
